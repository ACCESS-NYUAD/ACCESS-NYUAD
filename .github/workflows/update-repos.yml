name: Update Org Repo List

on:
  workflow_dispatch:      # ← manual trigger only

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Fetch mubadala-access public repos
        id: repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            const repos = await github.paginate(
              github.rest.repos.listForOrg,
              { org: 'mubadala-access', type: 'public', per_page: 100 }
            );
            return repos.map(r => `- [${r.name}](${r.html_url})`).join('\n');

      - name: Inject list into README
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_TOKEN }}
          script: |
            // 1. Grab and trim the raw step output
            let raw = `${{ steps.repos.outputs.result }}`.trim();

            // 2. Remove wrapping quotes if present
            if (raw.startsWith('"') && raw.endsWith('"')) {
              raw = raw.slice(1, -1);
            }

            // 3. Normalize each line to start with "- "
            const bullets = raw
              .split('\n')
              .map(line => line.replace(/^["\s-]*/, '- '))
              .join('\n');

            // 4. Build the markdown block (only the public-repos heading + list)
            const block = [
              '## All Public Repositories owned by Mubadala-ACCESS at https://github.com/Mubadala-ACCESS/ :',
              '',
              bullets
            ].join('\n');

            // 5. Read your README.md
            const path = 'README.md';
            const { data: content } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path
            });
            const oldMd = Buffer.from(content.content, 'base64').toString();

            // 6. Replace between your markers
            const updated = oldMd.replace(
              /<!-- START_ORG_REPOS -->[\s\S]*?<!-- END_ORG_REPOS -->/,
              `<!-- START_ORG_REPOS -->\n${block}\n<!-- END_ORG_REPOS -->`
            );

            // 7. Commit back to main
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path,
              message: 'chore: update public org-repo list',
              content: Buffer.from(updated).toString('base64'),
              sha: content.sha
            });
